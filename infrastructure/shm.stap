%{
    #include<linux/shmem_fs.h>
    #include<linux/fs.h>
    #include<linux/string.h>
    #include<linux/printk.h>
    #include<linux/user_namespace.h>

  struct file* shmemfp = NULL;
%}

function update_shmem (pid:long,name:string) %{
         char to_write[512];
         memset(to_write,0,512);
         snprintf(to_write,511,"%lld,%s",STAP_ARG_pid,STAP_ARG_name);
         vfs_llseek(shmemfp,0,SEEK_SET);
         kernel_write(shmemfp,to_write,sizeof(char)*512,&(shmemfp->f_pos));
         vfs_fsync(shmemfp, 0);
%}

function setup() %{
  printk("Opening shmem file\n");
  //shmemfp=shmem_file_setup("/dev/shm/stap_func_id",512,0);
  shmemfp=filp_open("/dev/shm/stap_func_id",O_CREAT | O_TRUNC | O_RDWR,0666);
  printk("shmemfp:%p\n",shmemfp);
%}

function teardown() %{
      struct inode *parent_inode = shmemfp->f_path.dentry->d_parent->d_inode, *delegated_inode=NULL;
      filp_close(shmemfp,NULL);
      //inode_lock(parent_inode);
      //vfs_unlink(&init_user_ns,parent_inode, shmemfp->f_path.dentry, &delegated_inode);
      //inode_unlock(parent_inode);
  %}


probe begin {
  setup()
  update_shmem(-1,"systemtap_setup");
}

probe process(@1).function("*").call {
      //printf("Called %s\n",probefunc())
      update_shmem(pid(),probefunc())
      //printf(" %p\n",ustack(-1))
      //printf("wrote info on shared memory\n")
      //printf("%s\n\n",ucallers(-1))
      //printf("\n")
}

probe process(@1).function("*").return {
      //printf("return to %s\n",probefunc())
      update_shmem(pid(),probefunc())
      //printf(" %p\n",ustack(-1))
      //printf(" wrote info on shared memory\n")
      //printf(" %s\n\n",ucallers(-1))
      //printf("\n")
}

probe end { 
  teardown()
 }
